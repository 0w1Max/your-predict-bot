const TelegramBot = require('node-telegram-bot-api');
const { handleCommands } = require('./commands');
const { getRandomPrediction } = require('./predictions');
const logger = require('./logger');
const db = require('./db');
require('dotenv').config();

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

bot.on('message', (msg) => {
  logger.info(`üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${msg.chat.id}: ${msg.text}`);
  handleCommands(bot, msg);
});

// üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;

  if (query.data === 'predict') {
    const prediction = await getRandomPrediction();
    bot.sendMessage(chatId, `üîÆ –¢–≤–æ—ë –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: ${prediction}`);
  } 
  else if (query.data === 'add') {
    bot.sendMessage(chatId, '‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /add [—Ç–µ–∫—Å—Ç]');
  }

  bot.answerCallbackQuery(query.id);
});

logger.info('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');

// üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (err) => {
  logger.error('‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
});

process.on('unhandledRejection', (reason, promise) => {
  logger.warn('‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–º–∏—Å:', reason);
});

// üîπ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞
process.on('SIGINT', () => {
  logger.info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
  bot.stopPolling();
  db.close(() => {
    logger.info('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –∑–∞–∫—Ä—ã—Ç–æ.');
    process.exit(0);
  });
});
